{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Apache Kafka Studies This repository regroup a set of deeper personal studies on kafka. Mirror Maker 2.0 The mirror-maker-2 folder includes the scripts and configurations to support different mirroring strategies. The details are in this note. Kafka Connect with Debezium Kafka with Quarkus Kafka with Apache Camel 3.0","title":"Introduction"},{"location":"#apache-kafka-studies","text":"This repository regroup a set of deeper personal studies on kafka.","title":"Apache Kafka Studies"},{"location":"#mirror-maker-20","text":"The mirror-maker-2 folder includes the scripts and configurations to support different mirroring strategies. The details are in this note.","title":"Mirror Maker 2.0"},{"location":"#kafka-connect-with-debezium","text":"","title":"Kafka Connect with Debezium"},{"location":"#kafka-with-quarkus","text":"","title":"Kafka with Quarkus"},{"location":"#kafka-with-apache-camel-30","text":"","title":"Kafka with Apache Camel 3.0"},{"location":"kstreams/","text":"Kafka Streams implementation of the container inventory management In this chapter we are presenting how to sue the Kafka Streams API combined with Kafka event sourcing to implement the container inventory management. The component can be represented in the figure below: For getting started with Kafka Streams API read this tutorial . The container topics includes all the event about container life cycle. The application is Java based and deployed in Liberty packaged into a docker image deployable on Kubernetes. The service exposes some RESTful APIs to get a container by ID. No CUD operations as all is done via events. The Streams implementation keeps data in Ktable. As a java based microservice we have two approaches to implement the service: springboot and microprofile. Knowing we will deploy on kubernetes cluster with Istio we will have a lot of the resiliency and scalability addressed for us. Microprofile add a lot of nice capabilities like SSL, open API, JAXRS... Microprofile is supported by Open Liberty as well as many servers. The Apache Kafka Streams API is a client library for building applications and microservices, where the input and output data are stored in Kafka clusters. It simplifies the implementation of the stateless or stateful event processing to transform and enrich data. It supports time windowing processing. We encourage to do this Streams tutorial . The features we want to illustrate in this implementation, using KStreams are: Listen to ContainerAddedToInventory event from the containers topic and maintains a stateful table of containers. Listen to OrderCreated event from orders and assign a container from the inventory based on the pickup location and the container location and its characteristics. Implemented as JAXRS application deployed on Liberty and packaged with dockerfile. Deploy to kubernetes or run with docker-compose Start with maven Kafka streams delivers a Maven archetype to create a squeleton project. The following command can be used to create the base code. mvn archetype:generate -DarchetypeGroupId = org.apache.kafka -DarchetypeArtifactId = streams-quickstart-java -DarchetypeVersion = 2 .1.0 -DgroupId = kc-container -DartifactId = kc-container-streams -Dversion = 0 .1 -Dpackage = containerManager We added a .project file to develop the code in Eclipse, imported the code into Eclipse and modify the .classpath with the following lines: <classpathentry kind= \"con\" path= \"org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER\" > <attributes> <attribute name= \"maven.pomderived\" value= \"true\" /> </attributes> </classpathentry> To access to serializer and testing framework we added the following dependencies in the pom.xml: <dependency> <groupId> org.apache.kafka </groupId> <artifactId> kafka-clients </artifactId> <version> ${kafka.version} </version> </dependency> <dependency> <groupId> org.apache.kafka </groupId> <artifactId> kafka-streams-test-utils </artifactId> <version> ${kafka.version} </version> <scope> test </scope> </dependency> Using this approach as the service runs in OpenLiberty and integrate JAXRS, microprofile, Open API,... we have to add a lot of depencies into the pom.xml file. Another approach is to use IBM Cloud starter kit. Start with IBM Cloud microprofile starter kit Use the Create resource option and select the \"Java microservice with microprofile and Java EE\" starter kit as shown below: Then enter an application name (e.g. MP-ContainerMS) with a resource group and may be some tags. The next step is to select a kubernetes cluster instance: Configure the toolchain, and verify the application is created in the console: The application is accessible from github, a toolchain is ready to process the app and deploy it. At the time of writting, and most likely in the future too, the steps and the documentations are not aligned. Code is release on a weekly basis and the documentation is often behind. We can download the source code from the github. The address was https://git.ng.bluemix.net/boyerje/MP-ContainerMS. We have to unprotect the master branch so we can push our update. We also have to modify the deployment configuration to change the target namespace. The generated code includes helm chart, Dockerfiles, and base JAXRS code. The code generated is very similar to the one created using the ibmcloud dev CLI. But we need to modify this generated project with some specific microprofile content. Eclipse microprofile is now on version 2.2, so we also use the following code generator from the Microprofile starter site so we can get updated code with new capability like SSL, openAPI and JWT supports. So now we need to integrate both code and then add Kafka streams. Here are some of the main updates we did: Add in the cli-config.yml the registry address and cluster name Change pom dependencies for microprofile 2.2, and change the image in Dockerfile to access websphere liberty 19.0.0.3 compatible with 2.2. (FROM websphere-liberty:19.0.0.3-microProfile2) Use the health class from the microprofile 2.2 generated code, as it uses microprofile annotation. Add also the configuration injection with properties file. Add new package names. Remove unnecessary files * Modify the Values.yaml to reflect the target registry and add secret reference: repository: us.icr.io/ibmcaseeda/mpcontainerms tag: latest pullPolicy: Always pullSecret: browncompute-registry-secret Some of those steps are pushed to the development kubernetes cluster using the command: Some useful Kafka streams APIs The stream configuration looks similar to the Kafka consumer and producer configuration. props . put ( StreamsConfig . APPLICATION_ID_CONFIG , \"container-streams\" ); props . put ( StreamsConfig . BOOTSTRAP_SERVERS_CONFIG , \"localhost:9092\" ); props . put ( StreamsConfig . DEFAULT_KEY_SERDE_CLASS_CONFIG , Serdes . String (). getClass ()); props . put ( StreamsConfig . DEFAULT_VALUE_SERDE_CLASS_CONFIG , Serdes . String (). getClass ()); The StreamsConfig is a specific configuration for Streams app. One of the interesting class is the KStream to manage a stream of structured events. Kstreams represents unbounded collection of immutable events. Two classes are supporting the order and container processing: ContainerInventoryView ContainerOrderAssignment We are using the Streams DSL APIs to do the processing. Here is an example of terminal stream to print what is coming to the orders topic: final StreamsBuilder builder = new StreamsBuilder (); builder . stream ( \"orders\" ) . foreach (( key , value ) -> { Order order = parser . fromJson (( String ) value , OrderEvent . class ). getPayload (); // TODO do something to the order System . out . println ( \"received order \" + key + \" \" + value ); }); final Topology topology = builder . build (); final KafkaStreams streams = new KafkaStreams ( topology , props ); streams . start (); We want now to implement the container inventory. We want to support the following events: ContainerAddedToInventory, ContainerRemovedFromInventory ContainerAtLocation ContainerOnMaintenance, ContainerOffMaintenance, ContainerAssignedToOrder, ContainerReleasedFromOrder ContainerGoodLoaded, ContainerGoodUnLoaded ContainerOnShip, ContainerOffShip ContainerOnTruck, ContainerOffTruck We want the container event to keep a timestamp, a version, a type, and a payload representing the data describing a Reefer container. The Key is the containerID. The java class for the container event is here . Using a TDD approach we will start by the tests to implement the solution. For more information on the Streams DSL API, keep this page close to you . Test Driven Development We want to document two major test suites. One for building the internal view of the container inventory, the other to support the container to order assignment. Container inventory When the service receives a ContainerAdded event it needs to add it to the table and be able to retreive it by ID To support the Get By ID we are adding a Service class with the operation exposed as RESTful resource using JAXRS annotations. We already described this approach in the fleetms project . To test a stream application without Kafka backbone there is a test utility available here . The settings are simple: get the properties, define the serialisation of the key and value of the event to get from kafka, define the stream process flow, named topology, send the input and get the output. The test TestContainerInventory is illustrating how to use the TopologyTestDriver . Properties props = ApplicationConfig . getStreamsProperties ( \"test\" ); props . put ( StreamsConfig . BOOTSTRAP_SERVERS_CONFIG , \"dummy:1234\" ); TopologyTestDriver testDriver = new TopologyTestDriver ( buildProcessFlow (), props ); ConsumerRecordFactory < String , String > factory = new ConsumerRecordFactory < String , String >( \"containers\" , new StringSerializer (), new StringSerializer ()); ConsumerRecord < byte [], byte []> record = factory . create ( \"containers\" , ce . getContainerID (), parser . toJson ( ce )); testDriver . pipeInput ( record ); We are using the String default serialization for the key and the ContainerEvent, and use Gson to serialize and deserialize the json. So the test is to prepare a ContainerEvent with type = \"ContainerAdded\" and then get the payload, persist it in the table and access to the table via the concept of store and validate the data. Below is the access to the store and compare the expected results KeyValueStore < String , String > store = testDriver . getKeyValueStore ( \"queryable-container-store\" ); String containerStrg = store . get ( ce . getContainerID ()); Assert . assertNotNull ( containerStrg ); Assert . assertTrue ( containerStrg . contains ( ce . getContainerID ())); Assert . assertTrue ( containerStrg . contains ( \"atDock\" )); Now the tricky part is in the Stream process flow. The idea is to process the ContainerEvent as streams (of String) and extract the payload (a Container), then generate the Container in a new stream, group by the key and then save to a table. We separate the code in a function so e can move it into the real application after. public Topology buildProcessFlow () { final StreamsBuilder builder = new StreamsBuilder (); // containerEvent is a string, map values help to change the type and data of the inpit values builder . stream ( CONTAINERS_TOPIC ). mapValues (( containerEvent ) -> { // the container payload is of interest to keep in table Container c = jsonParser . fromJson (( String ) containerEvent , ContainerEvent . class ). getPayload (); return jsonParser . toJson ( c ); }). groupByKey () // the keys are kept so we can group by key to prepare for the tabl . reduce (( container , container1 ) -> { System . out . println ( \"received container \" + container1 ); return container1 ; }, Materialized . as ( \"queryable-container-store\" )); return builder . build (); } The trick is to use the reduce() function that get the container and save it to the store that we can specify. The unit test runs successfully with the command: mvn -Dtest=TestContainerInventory test . This logic can be integrated in a View class. So we can refactor the test and add new class (see ContainerInventoryView class) to move the logic into the applciation. From a design point of view this class is a DAO. Now that we are not using the Testing tool, we need the real streams. In class ContainerInventoryView: private KafkaStreams streams ; // .. Properties props = ApplicationConfig . getStreamsProperties ( \"container-streams\" ); props . put ( ConsumerConfig . AUTO_OFFSET_RESET_CONFIG , \"earliest\" ); streams = new KafkaStreams ( buildProcessFlow (), props ); try { streams . cleanUp (); streams . start (); } catch ( Throwable e ) { System . exit ( 1 ); } As illustrated above, the streams API is a continuous running Thread, so it needs to be started only one time. We will address scaling separatly. So we isolate the DAO as a Singleton, and start it when the deployed application starts, via a ServletContextListener. public class EventLoop implements ServletContextListener { @Override public void contextInitialized ( ServletContextEvent sce ) { // Initialize the Container consumer ContainerInventoryView cView = ( ContainerInventoryView ) ContainerInventoryView . instance (); cView . start (); } Now we can add the getById operation, package as a war, deploy it to Liberty. Container to Order Assignment The business logic we want to implement is to get an order with the source pickup city, the type of product, the quantity and the expected pickup date, manage the internal list of containers and search for a container located close to the pickup city from the order. The test to validate this logic is under kstreams/src/test/java/ut/TestContainerAssignment . The story will not be completed if we do not talk about how th application get the order. As presented in the design and order command microservice implementation, when an order is created an event is generated to the orders topic. So we need to add another Streams processing and start the process flow in the context listener. Run tests Recall with maven we can run all the unit tests, one test and skip integration tests. # Test a unique test $ mvn -Dtest = TestContainerInventory test # Skip all tests mvn install -DskipTests # Skip integration test mvn install -DskipITs # Run everything mvn install To start the liberty server use the script: ./script/startLocalLiberty or mvn liberty:run-server docker compose configuration Replace existing springcontainerms declaration to the following containerkstreams : image : ibmcase/kc-containerkstreams:latest hostname : containerkstreams ports : - \"12080:9080\" environment : KAFKA_ENV : ${KAFKA_ENV} KAFKA_BROKERS : ${KAFKA_BROKERS} KAFKA_APIKEY : ${KAFKA_APIKEY} How streams flows are resilient? Specifying the replicas factor at the topic level, with a cluster of kafka brokers, combine with transactional event produce, ensure to do not lose messages. The producer client code has the list of all the brokers to contact in case of failure and will try to connect to any broker in the list. How to scale?","title":"Kafka streaming notes"},{"location":"kstreams/#kafka-streams-implementation-of-the-container-inventory-management","text":"In this chapter we are presenting how to sue the Kafka Streams API combined with Kafka event sourcing to implement the container inventory management. The component can be represented in the figure below: For getting started with Kafka Streams API read this tutorial . The container topics includes all the event about container life cycle. The application is Java based and deployed in Liberty packaged into a docker image deployable on Kubernetes. The service exposes some RESTful APIs to get a container by ID. No CUD operations as all is done via events. The Streams implementation keeps data in Ktable. As a java based microservice we have two approaches to implement the service: springboot and microprofile. Knowing we will deploy on kubernetes cluster with Istio we will have a lot of the resiliency and scalability addressed for us. Microprofile add a lot of nice capabilities like SSL, open API, JAXRS... Microprofile is supported by Open Liberty as well as many servers. The Apache Kafka Streams API is a client library for building applications and microservices, where the input and output data are stored in Kafka clusters. It simplifies the implementation of the stateless or stateful event processing to transform and enrich data. It supports time windowing processing. We encourage to do this Streams tutorial . The features we want to illustrate in this implementation, using KStreams are: Listen to ContainerAddedToInventory event from the containers topic and maintains a stateful table of containers. Listen to OrderCreated event from orders and assign a container from the inventory based on the pickup location and the container location and its characteristics. Implemented as JAXRS application deployed on Liberty and packaged with dockerfile. Deploy to kubernetes or run with docker-compose","title":"Kafka Streams implementation of the container inventory management"},{"location":"kstreams/#start-with-maven","text":"Kafka streams delivers a Maven archetype to create a squeleton project. The following command can be used to create the base code. mvn archetype:generate -DarchetypeGroupId = org.apache.kafka -DarchetypeArtifactId = streams-quickstart-java -DarchetypeVersion = 2 .1.0 -DgroupId = kc-container -DartifactId = kc-container-streams -Dversion = 0 .1 -Dpackage = containerManager We added a .project file to develop the code in Eclipse, imported the code into Eclipse and modify the .classpath with the following lines: <classpathentry kind= \"con\" path= \"org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER\" > <attributes> <attribute name= \"maven.pomderived\" value= \"true\" /> </attributes> </classpathentry> To access to serializer and testing framework we added the following dependencies in the pom.xml: <dependency> <groupId> org.apache.kafka </groupId> <artifactId> kafka-clients </artifactId> <version> ${kafka.version} </version> </dependency> <dependency> <groupId> org.apache.kafka </groupId> <artifactId> kafka-streams-test-utils </artifactId> <version> ${kafka.version} </version> <scope> test </scope> </dependency> Using this approach as the service runs in OpenLiberty and integrate JAXRS, microprofile, Open API,... we have to add a lot of depencies into the pom.xml file. Another approach is to use IBM Cloud starter kit.","title":"Start with maven"},{"location":"kstreams/#start-with-ibm-cloud-microprofile-starter-kit","text":"Use the Create resource option and select the \"Java microservice with microprofile and Java EE\" starter kit as shown below: Then enter an application name (e.g. MP-ContainerMS) with a resource group and may be some tags. The next step is to select a kubernetes cluster instance: Configure the toolchain, and verify the application is created in the console: The application is accessible from github, a toolchain is ready to process the app and deploy it. At the time of writting, and most likely in the future too, the steps and the documentations are not aligned. Code is release on a weekly basis and the documentation is often behind. We can download the source code from the github. The address was https://git.ng.bluemix.net/boyerje/MP-ContainerMS. We have to unprotect the master branch so we can push our update. We also have to modify the deployment configuration to change the target namespace. The generated code includes helm chart, Dockerfiles, and base JAXRS code. The code generated is very similar to the one created using the ibmcloud dev CLI. But we need to modify this generated project with some specific microprofile content. Eclipse microprofile is now on version 2.2, so we also use the following code generator from the Microprofile starter site so we can get updated code with new capability like SSL, openAPI and JWT supports. So now we need to integrate both code and then add Kafka streams. Here are some of the main updates we did: Add in the cli-config.yml the registry address and cluster name Change pom dependencies for microprofile 2.2, and change the image in Dockerfile to access websphere liberty 19.0.0.3 compatible with 2.2. (FROM websphere-liberty:19.0.0.3-microProfile2) Use the health class from the microprofile 2.2 generated code, as it uses microprofile annotation. Add also the configuration injection with properties file. Add new package names. Remove unnecessary files * Modify the Values.yaml to reflect the target registry and add secret reference: repository: us.icr.io/ibmcaseeda/mpcontainerms tag: latest pullPolicy: Always pullSecret: browncompute-registry-secret Some of those steps are pushed to the development kubernetes cluster using the command:","title":"Start with IBM Cloud microprofile starter kit"},{"location":"kstreams/#some-useful-kafka-streams-apis","text":"The stream configuration looks similar to the Kafka consumer and producer configuration. props . put ( StreamsConfig . APPLICATION_ID_CONFIG , \"container-streams\" ); props . put ( StreamsConfig . BOOTSTRAP_SERVERS_CONFIG , \"localhost:9092\" ); props . put ( StreamsConfig . DEFAULT_KEY_SERDE_CLASS_CONFIG , Serdes . String (). getClass ()); props . put ( StreamsConfig . DEFAULT_VALUE_SERDE_CLASS_CONFIG , Serdes . String (). getClass ()); The StreamsConfig is a specific configuration for Streams app. One of the interesting class is the KStream to manage a stream of structured events. Kstreams represents unbounded collection of immutable events. Two classes are supporting the order and container processing: ContainerInventoryView ContainerOrderAssignment We are using the Streams DSL APIs to do the processing. Here is an example of terminal stream to print what is coming to the orders topic: final StreamsBuilder builder = new StreamsBuilder (); builder . stream ( \"orders\" ) . foreach (( key , value ) -> { Order order = parser . fromJson (( String ) value , OrderEvent . class ). getPayload (); // TODO do something to the order System . out . println ( \"received order \" + key + \" \" + value ); }); final Topology topology = builder . build (); final KafkaStreams streams = new KafkaStreams ( topology , props ); streams . start (); We want now to implement the container inventory. We want to support the following events: ContainerAddedToInventory, ContainerRemovedFromInventory ContainerAtLocation ContainerOnMaintenance, ContainerOffMaintenance, ContainerAssignedToOrder, ContainerReleasedFromOrder ContainerGoodLoaded, ContainerGoodUnLoaded ContainerOnShip, ContainerOffShip ContainerOnTruck, ContainerOffTruck We want the container event to keep a timestamp, a version, a type, and a payload representing the data describing a Reefer container. The Key is the containerID. The java class for the container event is here . Using a TDD approach we will start by the tests to implement the solution. For more information on the Streams DSL API, keep this page close to you .","title":"Some useful Kafka streams APIs"},{"location":"kstreams/#test-driven-development","text":"We want to document two major test suites. One for building the internal view of the container inventory, the other to support the container to order assignment.","title":"Test Driven Development"},{"location":"kstreams/#container-inventory","text":"When the service receives a ContainerAdded event it needs to add it to the table and be able to retreive it by ID To support the Get By ID we are adding a Service class with the operation exposed as RESTful resource using JAXRS annotations. We already described this approach in the fleetms project . To test a stream application without Kafka backbone there is a test utility available here . The settings are simple: get the properties, define the serialisation of the key and value of the event to get from kafka, define the stream process flow, named topology, send the input and get the output. The test TestContainerInventory is illustrating how to use the TopologyTestDriver . Properties props = ApplicationConfig . getStreamsProperties ( \"test\" ); props . put ( StreamsConfig . BOOTSTRAP_SERVERS_CONFIG , \"dummy:1234\" ); TopologyTestDriver testDriver = new TopologyTestDriver ( buildProcessFlow (), props ); ConsumerRecordFactory < String , String > factory = new ConsumerRecordFactory < String , String >( \"containers\" , new StringSerializer (), new StringSerializer ()); ConsumerRecord < byte [], byte []> record = factory . create ( \"containers\" , ce . getContainerID (), parser . toJson ( ce )); testDriver . pipeInput ( record ); We are using the String default serialization for the key and the ContainerEvent, and use Gson to serialize and deserialize the json. So the test is to prepare a ContainerEvent with type = \"ContainerAdded\" and then get the payload, persist it in the table and access to the table via the concept of store and validate the data. Below is the access to the store and compare the expected results KeyValueStore < String , String > store = testDriver . getKeyValueStore ( \"queryable-container-store\" ); String containerStrg = store . get ( ce . getContainerID ()); Assert . assertNotNull ( containerStrg ); Assert . assertTrue ( containerStrg . contains ( ce . getContainerID ())); Assert . assertTrue ( containerStrg . contains ( \"atDock\" )); Now the tricky part is in the Stream process flow. The idea is to process the ContainerEvent as streams (of String) and extract the payload (a Container), then generate the Container in a new stream, group by the key and then save to a table. We separate the code in a function so e can move it into the real application after. public Topology buildProcessFlow () { final StreamsBuilder builder = new StreamsBuilder (); // containerEvent is a string, map values help to change the type and data of the inpit values builder . stream ( CONTAINERS_TOPIC ). mapValues (( containerEvent ) -> { // the container payload is of interest to keep in table Container c = jsonParser . fromJson (( String ) containerEvent , ContainerEvent . class ). getPayload (); return jsonParser . toJson ( c ); }). groupByKey () // the keys are kept so we can group by key to prepare for the tabl . reduce (( container , container1 ) -> { System . out . println ( \"received container \" + container1 ); return container1 ; }, Materialized . as ( \"queryable-container-store\" )); return builder . build (); } The trick is to use the reduce() function that get the container and save it to the store that we can specify. The unit test runs successfully with the command: mvn -Dtest=TestContainerInventory test . This logic can be integrated in a View class. So we can refactor the test and add new class (see ContainerInventoryView class) to move the logic into the applciation. From a design point of view this class is a DAO. Now that we are not using the Testing tool, we need the real streams. In class ContainerInventoryView: private KafkaStreams streams ; // .. Properties props = ApplicationConfig . getStreamsProperties ( \"container-streams\" ); props . put ( ConsumerConfig . AUTO_OFFSET_RESET_CONFIG , \"earliest\" ); streams = new KafkaStreams ( buildProcessFlow (), props ); try { streams . cleanUp (); streams . start (); } catch ( Throwable e ) { System . exit ( 1 ); } As illustrated above, the streams API is a continuous running Thread, so it needs to be started only one time. We will address scaling separatly. So we isolate the DAO as a Singleton, and start it when the deployed application starts, via a ServletContextListener. public class EventLoop implements ServletContextListener { @Override public void contextInitialized ( ServletContextEvent sce ) { // Initialize the Container consumer ContainerInventoryView cView = ( ContainerInventoryView ) ContainerInventoryView . instance (); cView . start (); } Now we can add the getById operation, package as a war, deploy it to Liberty.","title":"Container inventory"},{"location":"kstreams/#container-to-order-assignment","text":"The business logic we want to implement is to get an order with the source pickup city, the type of product, the quantity and the expected pickup date, manage the internal list of containers and search for a container located close to the pickup city from the order. The test to validate this logic is under kstreams/src/test/java/ut/TestContainerAssignment . The story will not be completed if we do not talk about how th application get the order. As presented in the design and order command microservice implementation, when an order is created an event is generated to the orders topic. So we need to add another Streams processing and start the process flow in the context listener.","title":"Container to Order Assignment"},{"location":"kstreams/#run-tests","text":"Recall with maven we can run all the unit tests, one test and skip integration tests. # Test a unique test $ mvn -Dtest = TestContainerInventory test # Skip all tests mvn install -DskipTests # Skip integration test mvn install -DskipITs # Run everything mvn install To start the liberty server use the script: ./script/startLocalLiberty or mvn liberty:run-server","title":"Run tests"},{"location":"kstreams/#docker-compose-configuration","text":"Replace existing springcontainerms declaration to the following containerkstreams : image : ibmcase/kc-containerkstreams:latest hostname : containerkstreams ports : - \"12080:9080\" environment : KAFKA_ENV : ${KAFKA_ENV} KAFKA_BROKERS : ${KAFKA_BROKERS} KAFKA_APIKEY : ${KAFKA_APIKEY}","title":"docker compose configuration"},{"location":"kstreams/#how-streams-flows-are-resilient","text":"Specifying the replicas factor at the topic level, with a cluster of kafka brokers, combine with transactional event produce, ensure to do not lose messages. The producer client code has the list of all the brokers to contact in case of failure and will try to connect to any broker in the list.","title":"How streams flows are resilient?"},{"location":"kstreams/#how-to-scale","text":"","title":"How to scale?"},{"location":"mirrormaker/","text":"Mirror Maker 2.0 Mirror Maker 2.0 is the new replication feature of Kafka 2.4. The mirror-maker-2 folder includes, scripts, code and configurations to support the different topic replication scenarios we want to validate: Replicate from Event Streams on cloud being source cluster to local Kafka cluster running on local machine (started via docker-compose) using Strimzi Kafka docker image. Replicate from Strimzi Kafka cluster running on OpenShift to Event Streams on Cloud. (See detail in this section ) General concepts As Mirror maker 2.0 is using kafka Connect framework, so we recommend to review our summary in this note . The figure below illustrates the mirror maker internal components running in Kafka Connect. As Mirror maker is running Kafka Connect in distributed mode, it creates the following topics on the the target cluster: mm2-configs.source.internal: This topic will store the connector and task configurations. mm2-offsets.source.internal: This topic is used to store offsets for Kafka Connect. mm2-status.source.internal: This topic will store status updates of connectors and tasks. White listed topics is set with the .topics attribute and use Java regular expression syntax. Blacklisted topics: by default the following pattern is applied blacklist = [follower\\.replication\\.throttled\\.replicas, leader\\.replication\\.throttled\\.replicas, message\\.timestamp\\.difference\\.max\\.ms, message\\.timestamp\\.type, unclean\\.leader\\.election\\.enable, min\\.insync\\.replicas] Internally MirrorSourceConnector and MirrorCheckpointConnector will create multiple tasks (up to tasks.max), MirrorHeartbeatConnector creates only one single task. MirrorSourceConnector will have one task per topic-partition to replicate, while MirrorCheckpointConnector will have one task per consumer group. The Kafka connect framework uses the coordinator API, with assign API and so there is no consumer group while fetching data from source topic. There is no call to commit() neither: the rebalancing occurs only when there is a new topic created that matches the whitelist pattern. From Event Streams to local cluster For the second tests the source is Event Streams on IBM Cloud: This time the producer adds headers and message and Mirror maker need to get the APIkey, so the mirror-maker.properties looks like: clusters = source, target source.bootstrap.servers = broker-3-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-1-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-0-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-5-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-2-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-4-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093 source.security.protocol = SASL_SSL source.ssl.protocol = TLSv1.2 source.sasl.mechanism = PLAIN source.sasl.jaas.config = org.apache.kafka.common.security.plain.PlainLoginModule required username=\"token\" password=\"985...\"; target.bootstrap.servers = kafka1:9092,kafka2:9093,kafka3:9094 # enable and configure individual replication flows source->target.enabled = true source->target.topics = orders From Kafka local as source to Event Streams on Cloud as Target We have created an Event Streams cluster on Washington DC data center. We have a Strimzi Kafka cluster defined in Washington data center in a OpenShift Cluster. As both clusters are in the same data center, we deploy Mirror Maker 2.0 close to target cluster (Event Streams on Cloud). What needs to be done: Get Broker list and API Key for Event Streams service on cloud using the service credentials. Get a Openshift cluster in the same data center as Event Streams service. Create a project in OpenShift: MirrorMakerToES. Deploy Kafka cluster and topic Strimzi operators. See the note here to do so Define source and target cluster properties in mirror maker properties file Add this properties file as a ConfigMap in OpenShift oc create configmap mm2properties --from-file kafka-to-es-mm2.properties The filename becomes a key stored in the data section of the ConfigMap. apiVersion : v1 data : kafka-to-es-mm2.properties : Deploy Mirror maker 2.0 pod within this project oc apply -f mm2-pod.yaml Define a secret for the API key of the target cluster oc create secret generic es-apikey-target --from-literal=binding=am_ Start a producer (for example the below code send products reference data into products topic) export KAFKA_PWD = \"replace-with-event-streams-apikey\" export KAFKA_BROKERS = \"...\" docker run -ti -v $( pwd ) :/home --rm -e KAFKA_PWD = $KAFKA_PWD -e KAFKA_BROKERS = $KAFKA_BROKERS jbcodeforce/python37 bash python SendProductToKafka.py Define a source cluster properties file with truststore and bootstrap servers. This file is used for the different Kafka tools like kafka-topics.sh or console producer and consumer. bootstrap.servers = .... security.protocol = SSL ssl.truststore.password = password ssl.truststore.location = /home/truststore.jks and a target cluster property file: bootstrap.servers = broker-3-q.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-4-q.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093 security.protocol = SASL_SSL ssl.protocol = TLSv1.2 sasl.mechanism = PLAIN sasl.jaas.config = org.apache.kafka.common.security.plain.PlainLoginModule required username=\"token\" password=\"am_...\"; Start a product producer with a python client code Start a consumer locally on your compute using the Strimzi/kafka image. docker run -ti -v $(pwd):/home strimzi/kafka:latest-kafka-2.4.0 bash cd /opt/kafka/bin ./kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap-jb-kafka-strimzi.gse-eda-demos-fa9ee67c9ab6a7791435450358e564cc-0001.us-east.containers.appdomain.cloud:443 --consumer.config /home/strimzi.properties --topic products Verify the created topics on target cluster (Event Streams) /opt/kafka/bin/kafka-topics.sh --bootstrap-server $KAFKA_BROKERS --command-config /home/eventstream.properties --list In case you need it... looking at source cluster topic list: /opt/kafka/bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap-jb-kafka-strimzi.gse-eda-demos-fa9ee67c9ab6a7791435450358e564cc-0001.us-east.containers.appdomain.cloud:443 --command-config /home/strinzi.properties --list Get detail on one topic: /opt/kafka/bin//kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap-jb-kafka-strimzi.gse-eda-demos-fa9ee67c9ab6a7791435450358e564cc-0001.us-east.containers.appdomain.cloud:443 --command-config /home/strimzi.properties --describe --topic products From Event Streams On Cloud to Strimzi Cluster on Openshift From Kafka cluster on Openshift cluster to local cluster The source cluster is a Strimzi cluster running on Openshift as a service on IBM Cloud. It was installed following the instructions documented here . The target cluster is also based on Strimzi kafka 2.4 docker image, but run in a local host, with docker compose. It starts two zookeeper nodes, and three kafka nodes. We need 3 kafka brokers as mirror maker created topics with a replication factor set to 3. Start the target cluster runnning on your laptop using: docker-compose up Start mirror maker2.0 : By using a new container, start another kakfa 2.4+ docker container, connected to the brokers via the kafkanet network, and mounting the configuration in the /home : docker run -ti --network kafkanet -v $( pwd ) :/home strimzi/kafka:latest-kafka-2.4.0 bash Inside this container starts mirror maker 2.0 using the script: /opt/kakfa/bin/connect-mirror-maker.sh /opt/kakfa/bin/connect-mirror-maker.sh /home/strimzi-mm2.properties The strimzi-mm2.properties properties file given as argument defines the source and target clusters and the topics to replicate: clusters = source, target source.bootstrap.servers = my-cluster-kafka-bootstrap-jb-kafka-strimzi.gse-eda-demos-fa9ee67c9ab6a7791435450358e564cc-0001.us-east.containers.appdomain.cloud:443 source.security.protocol = SSL source.ssl.truststore.password = password source.ssl.truststore.location = /home/truststore.jks target.bootstrap.servers = kafka1:9092,kafka2:9093,kafka3:9094 # enable and configure individual replication flows source->target.enabled = true source->target.topics = orders As the source cluster is deployed on Openshift, the exposed route to access the brokers is using TLS connection. So we need the certificate and create a truststore to be used by those Java programs. All kafka tools are done in java or scala so running in a JVM, which needs truststore for keep trusted TLS certificates. When running from a remote system to get the certificate do the following steps: Get the host ip address from the Route resource oc get routes my-cluster-kafka-bootstrap -o = jsonpath = '{.status.ingress[0].host}{\"\\n\"}' Get the TLS certificate from the broker oc get secrets oc extract secret/my-cluster-cluster-ca-cert --keys = ca.crt --to = - > ca.crt Transform the certificate fo java truststore keytool -import -trustcacerts -alias root -file ca.crt -keystore truststore.jks -storepass password -noprompt For Openshift or Kubernetes deployment, the mirror maker descriptor needs to declare the TLS stamza: mirrors : - sourceCluster : \"my-cluster-source\" targetCluster : \"my-cluster-target\" sourceConnector : config : replication.factor : 1 offset-syncs.topic.replication.factor : 1 sync.topic.acls.enabled : \"false\" targetConnector : tls : trustedCertificates : - secretName : my-cluster-cluster-cert certificate : ca.crt The consumer may be started in second or third step. To start it, you can use a new container or use one of the running kafka broker container. Using the Docker perspective in Visual Code, we can get into a bash shell within one of the Kafka broker container. The local folder is mounted to /home . Then the script, consumeFromLocal.sh source.orders will get messages from the replicated topic: source.orders Finally start the producer in another kafka broker shell /home/produceToStrimzi.sh orders Typical errors in Mirror Maker 2 traces Plugin class loader for connector: 'org.apache.kafka.connect.mirror.MirrorCheckpointConnector' was not found. Error while fetching metadata with correlation id 2314 : {source.heartbeats=UNKNOWN_TOPIC_OR_PARTITION}: Those messages may come from multiple reasons. One is the topic is not created. It can also being related to the fact the consumer polls on a topic that has just been created and the leader for this topic-partition is not yet available, you are in the middle of a leadership election. The advertised listener may not be set or found. Exception on not being able to create Log directory: do the following: export LOG_DIR=/tmp/logs ERROR WorkerSourceTask{id=MirrorSourceConnector-0} Failed to flush, timed out while waiting for producer to flush outstanding 1 messages ERROR WorkerSourceTask{id=MirrorSourceConnector-0} Failed to commit offsets (org.apache.kafka.connect.runtime.SourceTaskOffsetCommitter:114)","title":"Mirror Maker 2.0"},{"location":"mirrormaker/#mirror-maker-20","text":"Mirror Maker 2.0 is the new replication feature of Kafka 2.4. The mirror-maker-2 folder includes, scripts, code and configurations to support the different topic replication scenarios we want to validate: Replicate from Event Streams on cloud being source cluster to local Kafka cluster running on local machine (started via docker-compose) using Strimzi Kafka docker image. Replicate from Strimzi Kafka cluster running on OpenShift to Event Streams on Cloud. (See detail in this section )","title":"Mirror Maker 2.0"},{"location":"mirrormaker/#general-concepts","text":"As Mirror maker 2.0 is using kafka Connect framework, so we recommend to review our summary in this note . The figure below illustrates the mirror maker internal components running in Kafka Connect. As Mirror maker is running Kafka Connect in distributed mode, it creates the following topics on the the target cluster: mm2-configs.source.internal: This topic will store the connector and task configurations. mm2-offsets.source.internal: This topic is used to store offsets for Kafka Connect. mm2-status.source.internal: This topic will store status updates of connectors and tasks. White listed topics is set with the .topics attribute and use Java regular expression syntax. Blacklisted topics: by default the following pattern is applied blacklist = [follower\\.replication\\.throttled\\.replicas, leader\\.replication\\.throttled\\.replicas, message\\.timestamp\\.difference\\.max\\.ms, message\\.timestamp\\.type, unclean\\.leader\\.election\\.enable, min\\.insync\\.replicas] Internally MirrorSourceConnector and MirrorCheckpointConnector will create multiple tasks (up to tasks.max), MirrorHeartbeatConnector creates only one single task. MirrorSourceConnector will have one task per topic-partition to replicate, while MirrorCheckpointConnector will have one task per consumer group. The Kafka connect framework uses the coordinator API, with assign API and so there is no consumer group while fetching data from source topic. There is no call to commit() neither: the rebalancing occurs only when there is a new topic created that matches the whitelist pattern.","title":"General concepts"},{"location":"mirrormaker/#from-event-streams-to-local-cluster","text":"For the second tests the source is Event Streams on IBM Cloud: This time the producer adds headers and message and Mirror maker need to get the APIkey, so the mirror-maker.properties looks like: clusters = source, target source.bootstrap.servers = broker-3-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-1-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-0-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-5-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-2-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-4-qnprtqnp7hnkssdz.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093 source.security.protocol = SASL_SSL source.ssl.protocol = TLSv1.2 source.sasl.mechanism = PLAIN source.sasl.jaas.config = org.apache.kafka.common.security.plain.PlainLoginModule required username=\"token\" password=\"985...\"; target.bootstrap.servers = kafka1:9092,kafka2:9093,kafka3:9094 # enable and configure individual replication flows source->target.enabled = true source->target.topics = orders","title":"From Event Streams to local cluster"},{"location":"mirrormaker/#from-kafka-local-as-source-to-event-streams-on-cloud-as-target","text":"We have created an Event Streams cluster on Washington DC data center. We have a Strimzi Kafka cluster defined in Washington data center in a OpenShift Cluster. As both clusters are in the same data center, we deploy Mirror Maker 2.0 close to target cluster (Event Streams on Cloud). What needs to be done: Get Broker list and API Key for Event Streams service on cloud using the service credentials. Get a Openshift cluster in the same data center as Event Streams service. Create a project in OpenShift: MirrorMakerToES. Deploy Kafka cluster and topic Strimzi operators. See the note here to do so Define source and target cluster properties in mirror maker properties file Add this properties file as a ConfigMap in OpenShift oc create configmap mm2properties --from-file kafka-to-es-mm2.properties The filename becomes a key stored in the data section of the ConfigMap. apiVersion : v1 data : kafka-to-es-mm2.properties : Deploy Mirror maker 2.0 pod within this project oc apply -f mm2-pod.yaml Define a secret for the API key of the target cluster oc create secret generic es-apikey-target --from-literal=binding=am_ Start a producer (for example the below code send products reference data into products topic) export KAFKA_PWD = \"replace-with-event-streams-apikey\" export KAFKA_BROKERS = \"...\" docker run -ti -v $( pwd ) :/home --rm -e KAFKA_PWD = $KAFKA_PWD -e KAFKA_BROKERS = $KAFKA_BROKERS jbcodeforce/python37 bash python SendProductToKafka.py Define a source cluster properties file with truststore and bootstrap servers. This file is used for the different Kafka tools like kafka-topics.sh or console producer and consumer. bootstrap.servers = .... security.protocol = SSL ssl.truststore.password = password ssl.truststore.location = /home/truststore.jks and a target cluster property file: bootstrap.servers = broker-3-q.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093,broker-4-q.kafka.svc01.us-east.eventstreams.cloud.ibm.com:9093 security.protocol = SASL_SSL ssl.protocol = TLSv1.2 sasl.mechanism = PLAIN sasl.jaas.config = org.apache.kafka.common.security.plain.PlainLoginModule required username=\"token\" password=\"am_...\"; Start a product producer with a python client code Start a consumer locally on your compute using the Strimzi/kafka image. docker run -ti -v $(pwd):/home strimzi/kafka:latest-kafka-2.4.0 bash cd /opt/kafka/bin ./kafka-console-consumer.sh --bootstrap-server my-cluster-kafka-bootstrap-jb-kafka-strimzi.gse-eda-demos-fa9ee67c9ab6a7791435450358e564cc-0001.us-east.containers.appdomain.cloud:443 --consumer.config /home/strimzi.properties --topic products Verify the created topics on target cluster (Event Streams) /opt/kafka/bin/kafka-topics.sh --bootstrap-server $KAFKA_BROKERS --command-config /home/eventstream.properties --list In case you need it... looking at source cluster topic list: /opt/kafka/bin/kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap-jb-kafka-strimzi.gse-eda-demos-fa9ee67c9ab6a7791435450358e564cc-0001.us-east.containers.appdomain.cloud:443 --command-config /home/strinzi.properties --list Get detail on one topic: /opt/kafka/bin//kafka-topics.sh --bootstrap-server my-cluster-kafka-bootstrap-jb-kafka-strimzi.gse-eda-demos-fa9ee67c9ab6a7791435450358e564cc-0001.us-east.containers.appdomain.cloud:443 --command-config /home/strimzi.properties --describe --topic products","title":"From Kafka local as source to Event Streams on Cloud as Target"},{"location":"mirrormaker/#from-event-streams-on-cloud-to-strimzi-cluster-on-openshift","text":"","title":"From Event Streams On Cloud to Strimzi Cluster on Openshift"},{"location":"mirrormaker/#from-kafka-cluster-on-openshift-cluster-to-local-cluster","text":"The source cluster is a Strimzi cluster running on Openshift as a service on IBM Cloud. It was installed following the instructions documented here . The target cluster is also based on Strimzi kafka 2.4 docker image, but run in a local host, with docker compose. It starts two zookeeper nodes, and three kafka nodes. We need 3 kafka brokers as mirror maker created topics with a replication factor set to 3. Start the target cluster runnning on your laptop using: docker-compose up Start mirror maker2.0 : By using a new container, start another kakfa 2.4+ docker container, connected to the brokers via the kafkanet network, and mounting the configuration in the /home : docker run -ti --network kafkanet -v $( pwd ) :/home strimzi/kafka:latest-kafka-2.4.0 bash Inside this container starts mirror maker 2.0 using the script: /opt/kakfa/bin/connect-mirror-maker.sh /opt/kakfa/bin/connect-mirror-maker.sh /home/strimzi-mm2.properties The strimzi-mm2.properties properties file given as argument defines the source and target clusters and the topics to replicate: clusters = source, target source.bootstrap.servers = my-cluster-kafka-bootstrap-jb-kafka-strimzi.gse-eda-demos-fa9ee67c9ab6a7791435450358e564cc-0001.us-east.containers.appdomain.cloud:443 source.security.protocol = SSL source.ssl.truststore.password = password source.ssl.truststore.location = /home/truststore.jks target.bootstrap.servers = kafka1:9092,kafka2:9093,kafka3:9094 # enable and configure individual replication flows source->target.enabled = true source->target.topics = orders As the source cluster is deployed on Openshift, the exposed route to access the brokers is using TLS connection. So we need the certificate and create a truststore to be used by those Java programs. All kafka tools are done in java or scala so running in a JVM, which needs truststore for keep trusted TLS certificates. When running from a remote system to get the certificate do the following steps: Get the host ip address from the Route resource oc get routes my-cluster-kafka-bootstrap -o = jsonpath = '{.status.ingress[0].host}{\"\\n\"}' Get the TLS certificate from the broker oc get secrets oc extract secret/my-cluster-cluster-ca-cert --keys = ca.crt --to = - > ca.crt Transform the certificate fo java truststore keytool -import -trustcacerts -alias root -file ca.crt -keystore truststore.jks -storepass password -noprompt For Openshift or Kubernetes deployment, the mirror maker descriptor needs to declare the TLS stamza: mirrors : - sourceCluster : \"my-cluster-source\" targetCluster : \"my-cluster-target\" sourceConnector : config : replication.factor : 1 offset-syncs.topic.replication.factor : 1 sync.topic.acls.enabled : \"false\" targetConnector : tls : trustedCertificates : - secretName : my-cluster-cluster-cert certificate : ca.crt The consumer may be started in second or third step. To start it, you can use a new container or use one of the running kafka broker container. Using the Docker perspective in Visual Code, we can get into a bash shell within one of the Kafka broker container. The local folder is mounted to /home . Then the script, consumeFromLocal.sh source.orders will get messages from the replicated topic: source.orders Finally start the producer in another kafka broker shell /home/produceToStrimzi.sh orders","title":"From Kafka cluster on Openshift cluster to local cluster"},{"location":"mirrormaker/#typical-errors-in-mirror-maker-2-traces","text":"Plugin class loader for connector: 'org.apache.kafka.connect.mirror.MirrorCheckpointConnector' was not found. Error while fetching metadata with correlation id 2314 : {source.heartbeats=UNKNOWN_TOPIC_OR_PARTITION}: Those messages may come from multiple reasons. One is the topic is not created. It can also being related to the fact the consumer polls on a topic that has just been created and the leader for this topic-partition is not yet available, you are in the middle of a leadership election. The advertised listener may not be set or found. Exception on not being able to create Log directory: do the following: export LOG_DIR=/tmp/logs ERROR WorkerSourceTask{id=MirrorSourceConnector-0} Failed to flush, timed out while waiting for producer to flush outstanding 1 messages ERROR WorkerSourceTask{id=MirrorSourceConnector-0} Failed to commit offsets (org.apache.kafka.connect.runtime.SourceTaskOffsetCommitter:114)","title":"Typical errors in Mirror Maker 2 traces"}]}